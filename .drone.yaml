---
kind: pipeline
type: kubernetes
name: git-tools

steps:
- name: Build docker image
  image: docker:20.10.8-dind-alpine3.14
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  volumes:
  - name: dockersock
    path: /var/run
  commands:
  - mkdir ~/.aws
  - touch ~/.aws/credentials
  - echo "[default]" >> ~/.aws/credentials
  - echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
  - echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
  - apk add --update nodejs aws-cli
  - export REPO_URL=public.ecr.aws/r2d0o9n8/git-kustomize
  - export IMAGE_TAG=v1.0.0-${DRONE_COMMIT_SHA:0:8}
  - echo $REPO_URL:$IMAGE_TAG
  - docker build
         -t $REPO_URL:$IMAGE_TAG
         --no-cache .
  - docker images
  - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/r2d0o9n8
  - docker push $REPO_URL:$IMAGE_TAG
  - echo "Succeed to push to ECR $REPO_URL:$IMAGE_TAG!!!"


- name: Send telegram notification
  image: appleboy/drone-telegram
  settings:
    token:
      from_secret: bot-token
    to:
      from_secret: chatid
    message: >
      {{#success build.status}}
       {{repo.name}} build {{build.number}} succeeded.
      Commit sha: {{commit.sha}}.
      Check from {{build.link}}.
      Good job.
      {{else}}
        {{repo.name}} build {{build.number}} failed.
      Commit sha: {{commit.sha}}.
      Check from {{build.link}}.
      Fix it please.
      {{/success}}      
  when:
    status:
    - success
    - failure

services:
- name: docker
  image: docker:20.10.8-dind-alpine3.14
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run

volumes:
- name: dockersock
  temp: {}
